var core=require("@actions/core"),github=require("@actions/github"),eslint=require("eslint");class ESLintAction{constructor(){const e=this;this.eslintFolder=core.getInput("eslintFolder")||".",this.eslintConfig=core.getInput("eslintConfig")||".eslintrc.js",this.authToken=core.getInput("authToken")||null,this.context=github.context,core.info("Starting ESLint GitHub Action"),core.info("Configuration:"),core.info(`ESLint Folder: "${this.eslintFolder}"`),this.runLinter().then(function(t){try{return Promise.resolve(e.comment(t)).then(function(){})}catch(e){return Promise.reject(e)}})}runLinter(){try{const e=this,t=new eslint.ESLint({overrideConfigFile:e.eslintConfig});return Promise.resolve(t.lintFiles(e.eslintFolder)).then(function(e){let t=`# ESLint found ${e.length} files with issues\r\n`;return e.forEach(e=>{t+=`### ${e.errorCount} issues in ${e.filePath}\r\n`,e.messages.forEach(e=>{t+=e.message+"\r\n"})}),t})}catch(e){return Promise.reject(e)}}comment(e){try{const t=this;if(null===t.authToken)return core.info("No authToken provided. Won't post comment"),core.info(e),Promise.resolve();const n=github.getOctokit(t.authToken);return Promise.resolve(n.issues.createComment({issue_number:github.context.issue.number,body:e,repo:github.context.repo.repo,owner:github.context.repo.owner})).then(function(){})}catch(e){return Promise.reject(e)}}}const x=new ESLintAction;
